function sgrad_af_vt = sgradAlphaF_VT(res, b, v, beta_max, d, ...
    mu, gamma_f, gamma_m, alpha_f, alpha_m)
% A script to evaluate the selection gradient for alpha_f in the model
% with vertical transmission; res is a four-element vector containing the
% endemic equilibrium values of S_f, S_m, I_f, and I_m (in that order).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% evaluate the selection gradient
sgrad_af_vt = -((alpha_m + d) * (alpha_f + d) * ((1 * ((-mu - gamma_f) * d + alpha_f ^ 2) * res(1) * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * ((alpha_f + d) ^ 2) * (res(2) + res(4))) * sqrt((((res(1) * alpha_f * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (alpha_f + d) * (res(2) + res(4))) ^ 2 * alpha_m ^ 4 + ((2 * 1 * res(1) * alpha_f * (res(1) + res(3) + res(2) + res(4)) ^ 2 * (res(2) * alpha_f ^ 2 * 1 + (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f + res(2) * d * 1 * (mu + gamma_f)) * beta_max ^ 2) + 0.4e1 * (res(2) + res(4)) * (alpha_f + d) * (((1 * res(1)) - (1 * res(2)) / 0.2e1) * (alpha_f ^ 2) + (-(1 * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.2e1 * 1 * (d + mu + gamma_f / 0.2e1 + gamma_m / 0.2e1) * res(1)) * alpha_f + d * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (mu + gamma_f)) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + 0.2e1 * b ^ 2 * v ^ 2 * ((alpha_f + d) ^ 2) * ((res(2) + res(4)) ^ 2) * (d + mu + gamma_m)) * alpha_m ^ 3 + (((res(2) ^ 2 * alpha_f ^ 4 * 1 ^ 2 + 2 * res(2) * 1 * (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f ^ 3 + (1 ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_f) * d + (mu + gamma_f) ^ 2) * res(2) ^ 2 + 2 * res(1) * 1 * 1 * (d + mu + gamma_m) * (d + mu + gamma_f) * res(2) + 1 ^ 2 * res(1) ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_m) * d + (mu + gamma_m) ^ 2)) * alpha_f ^ 2 + 2 * res(2) * d * 1 * (mu + gamma_f) * (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f + res(2) ^ 2 * d ^ 2 * 1 ^ 2 * (mu + gamma_f) ^ 2) * (res(1) + res(3) + res(2) + res(4)) ^ 2 * beta_max ^ 2) + 0.4e1 * (res(2) + res(4)) * ((d + mu + gamma_m) * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (alpha_f ^ 2) + (-(1 * (d + mu + gamma_m) * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.3e1 / 0.2e1 * 1 * res(1) * ((d ^ 2) + (0.8e1 / 0.3e1 * mu + 0.2e1 / 0.3e1 * gamma_f + (2 * gamma_m)) * d + (mu + gamma_m) * (mu + 0.2e1 / 0.3e1 * gamma_f + gamma_m / 0.3e1))) * alpha_f + d * (d + mu + gamma_m) * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (mu + gamma_f)) * (alpha_f + d) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + ((res(2) + res(4)) ^ 2) * ((alpha_f + d) ^ 2) * b ^ 2 * v ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_m) * d + (mu + gamma_m) ^ 2)) * alpha_m ^ 2 + 0.2e1 * (mu + gamma_m) * ((1 * res(1) * alpha_f * (res(1) + res(3) + res(2) + res(4)) ^ 2 * (res(2) * alpha_f ^ 2 * 1 + (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f + res(2) * d * 1 * (mu + gamma_f)) * beta_max ^ 2) + 0.2e1 * (res(2) + res(4)) * (alpha_f + d) * (((1 * res(1)) - (1 * res(2)) / 0.2e1) * (alpha_f ^ 2) + (-(1 * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.2e1 * 1 * (d + mu + gamma_f / 0.2e1 + gamma_m / 0.2e1) * res(1)) * alpha_f + d * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (mu + gamma_f)) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + b ^ 2 * v ^ 2 * ((alpha_f + d) ^ 2) * ((res(2) + res(4)) ^ 2) * (d + mu + gamma_m)) * d * alpha_m + ((mu + gamma_m) ^ 2) * (d ^ 2) * ((res(1) * alpha_f * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (alpha_f + d) * (res(2) + res(4))) ^ 2) / (alpha_m + d) ^ 2 / ((alpha_f + d) ^ 2)) + 1 * ((-mu - gamma_f) * d + alpha_f ^ 2) * res(1) * ((alpha_f * 1 * (mu + alpha_m + gamma_m) * res(1) + res(2) * alpha_m * 1 * (mu + alpha_f + gamma_f)) * d + (1 * (mu + alpha_m + gamma_m) * res(1) + (1 * res(2) * (mu + alpha_f + gamma_f))) * alpha_m * alpha_f) * ((res(1) + res(3) + res(2) + res(4)) ^ 2) * (beta_max ^ 2) + 0.2e1 * (res(2) + res(4)) * (alpha_f + d) * ((0.3e1 / 0.2e1 * 1 * ((alpha_m + mu / 0.3e1 + gamma_m / 0.3e1) * alpha_f + (mu + gamma_f) * (alpha_m - mu - gamma_m) / 0.3e1) * res(1) - res(2) * alpha_m * 1 * (mu + alpha_f + gamma_f) / 0.2e1) * (d ^ 2) + (0.3e1 * 1 * ((alpha_m + mu / 0.3e1 + gamma_m / 0.3e1) * (alpha_f ^ 2) + alpha_m * (alpha_m + (5 * mu) + (4 * gamma_f) + gamma_m) * alpha_f / 0.6e1 - alpha_m * (mu + gamma_f) * (mu + alpha_m + gamma_m) / 0.6e1) * res(1) - res(2) * alpha_f * alpha_m * 1 * (mu + alpha_f + gamma_f)) * d + alpha_m * (alpha_f ^ 2) * (1 * (alpha_f + alpha_m + (2 * mu) + gamma_f + gamma_m) * res(1) - (1 * res(2) * (mu + alpha_f + gamma_f)) / 0.2e1)) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + b ^ 2 * v ^ 2 * ((alpha_f + d) ^ 3) * ((res(2) + res(4)) ^ 2) * (alpha_m + d) * (mu + alpha_m + gamma_m)) * ((((res(1) * alpha_f * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (alpha_f + d) * (res(2) + res(4))) ^ 2 * alpha_m ^ 4 + ((2 * 1 * res(1) * alpha_f * (res(1) + res(3) + res(2) + res(4)) ^ 2 * (res(2) * alpha_f ^ 2 * 1 + (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f + res(2) * d * 1 * (mu + gamma_f)) * beta_max ^ 2) + 0.4e1 * (res(2) + res(4)) * (alpha_f + d) * (((1 * res(1)) - (1 * res(2)) / 0.2e1) * (alpha_f ^ 2) + (-(1 * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.2e1 * 1 * (d + mu + gamma_f / 0.2e1 + gamma_m / 0.2e1) * res(1)) * alpha_f + d * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (mu + gamma_f)) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + 0.2e1 * b ^ 2 * v ^ 2 * ((alpha_f + d) ^ 2) * ((res(2) + res(4)) ^ 2) * (d + mu + gamma_m)) * alpha_m ^ 3 + (((res(2) ^ 2 * alpha_f ^ 4 * 1 ^ 2 + 2 * res(2) * 1 * (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f ^ 3 + (1 ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_f) * d + (mu + gamma_f) ^ 2) * res(2) ^ 2 + 2 * res(1) * 1 * 1 * (d + mu + gamma_m) * (d + mu + gamma_f) * res(2) + 1 ^ 2 * res(1) ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_m) * d + (mu + gamma_m) ^ 2)) * alpha_f ^ 2 + 2 * res(2) * d * 1 * (mu + gamma_f) * (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f + res(2) ^ 2 * d ^ 2 * 1 ^ 2 * (mu + gamma_f) ^ 2) * (res(1) + res(3) + res(2) + res(4)) ^ 2 * beta_max ^ 2) + 0.4e1 * (res(2) + res(4)) * ((d + mu + gamma_m) * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (alpha_f ^ 2) + (-(1 * (d + mu + gamma_m) * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.3e1 / 0.2e1 * 1 * res(1) * ((d ^ 2) + (0.8e1 / 0.3e1 * mu + 0.2e1 / 0.3e1 * gamma_f + (2 * gamma_m)) * d + (mu + gamma_m) * (mu + 0.2e1 / 0.3e1 * gamma_f + gamma_m / 0.3e1))) * alpha_f + d * (d + mu + gamma_m) * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (mu + gamma_f)) * (alpha_f + d) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + ((res(2) + res(4)) ^ 2) * ((alpha_f + d) ^ 2) * b ^ 2 * v ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_m) * d + (mu + gamma_m) ^ 2)) * alpha_m ^ 2 + 0.2e1 * (mu + gamma_m) * ((1 * res(1) * alpha_f * (res(1) + res(3) + res(2) + res(4)) ^ 2 * (res(2) * alpha_f ^ 2 * 1 + (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f + res(2) * d * 1 * (mu + gamma_f)) * beta_max ^ 2) + 0.2e1 * (res(2) + res(4)) * (alpha_f + d) * (((1 * res(1)) - (1 * res(2)) / 0.2e1) * (alpha_f ^ 2) + (-(1 * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.2e1 * 1 * (d + mu + gamma_f / 0.2e1 + gamma_m / 0.2e1) * res(1)) * alpha_f + d * ((1 * res(1)) - (1 * res(2)) / 0.2e1) * (mu + gamma_f)) * b * (res(1) + res(3) + res(2) + res(4)) * v * beta_max + b ^ 2 * v ^ 2 * ((alpha_f + d) ^ 2) * ((res(2) + res(4)) ^ 2) * (d + mu + gamma_m)) * d * alpha_m + ((mu + gamma_m) ^ 2) * (d ^ 2) * ((res(1) * alpha_f * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (alpha_f + d) * (res(2) + res(4))) ^ 2) / (alpha_m + d) ^ 2 / ((alpha_f + d) ^ 2)) ^ (-0.1e1 / 0.2e1) / ((mu + alpha_f + gamma_f) ^ 2) / (res(1) + res(3) + res(2) + res(4)) / ((alpha_f + d) ^ 3) / (alpha_m + d) / 0.2e1;