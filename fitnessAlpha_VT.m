function fitnessAlpha = fitnessAlpha_VT(res, b, v, beta_max, ...
    d, mu, alpha_f_mut, alpha_m_mut, gamma_f, gamma_m)
% A function to compute the fitness function for the pathogen virulence
% based on output from Maple. Input res is a four-element vector containing
% the equilibrium resident population values S_f, S_m, I_f, I_m.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% evaluate the fitness function
fitnessAlpha = ((alpha_m_mut + d) * (alpha_f_mut + d) * sqrt((((res(1) * alpha_f_mut * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (alpha_f_mut + d) * (res(2) + res(4))) ^ 2 * alpha_m_mut ^ 4 + ((2 * res(1) * (res(2) * 1 * alpha_f_mut ^ 2 + (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f_mut + res(2) * d * 1 * (mu + gamma_f)) * alpha_f_mut * 1 * (res(1) + res(3) + res(2) + res(4)) ^ 2 * beta_max ^ 2) + 0.4e1 * (((res(1) * 1) - (res(2) * 1) / 0.2e1) * (alpha_f_mut ^ 2) + (-(1 * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.2e1 * res(1) * 1 * (d + mu + gamma_f / 0.2e1 + gamma_m / 0.2e1)) * alpha_f_mut + d * ((res(1) * 1) - (res(2) * 1) / 0.2e1) * (mu + gamma_f)) * (alpha_f_mut + d) * (res(1) + res(3) + res(2) + res(4)) * v * b * (res(2) + res(4)) * beta_max + 0.2e1 * b ^ 2 * v ^ 2 * ((alpha_f_mut + d) ^ 2) * ((res(2) + res(4)) ^ 2) * (d + mu + gamma_m)) * alpha_m_mut ^ 3 + (((res(1) + res(3) + res(2) + res(4)) ^ 2 * (res(2) ^ 2 * alpha_f_mut ^ 4 * 1 ^ 2 + 2 * res(2) * (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * 1 * alpha_f_mut ^ 3 + ((d ^ 2 + (4 * mu + 4 * gamma_f) * d + (mu + gamma_f) ^ 2) * 1 ^ 2 * res(2) ^ 2 + 2 * res(1) * 1 * 1 * (d + mu + gamma_m) * (d + mu + gamma_f) * res(2) + res(1) ^ 2 * (d ^ 2 + (4 * mu + 4 * gamma_m) * d + (mu + gamma_m) ^ 2) * 1 ^ 2) * alpha_f_mut ^ 2 + 2 * d * res(2) * (mu + gamma_f) * (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * 1 * alpha_f_mut + res(2) ^ 2 * d ^ 2 * 1 ^ 2 * (mu + gamma_f) ^ 2) * beta_max ^ 2) + 0.4e1 * ((d + mu + gamma_m) * ((res(1) * 1) - (res(2) * 1) / 0.2e1) * (alpha_f_mut ^ 2) + (-(1 * (d + mu + gamma_m) * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.3e1 / 0.2e1 * res(1) * 1 * ((d ^ 2) + (0.8e1 / 0.3e1 * mu + 0.2e1 / 0.3e1 * gamma_f + (2 * gamma_m)) * d + (mu + gamma_m) * (mu + 0.2e1 / 0.3e1 * gamma_f + gamma_m / 0.3e1))) * alpha_f_mut + d * (d + mu + gamma_m) * ((res(1) * 1) - (res(2) * 1) / 0.2e1) * (mu + gamma_f)) * (alpha_f_mut + d) * (res(1) + res(3) + res(2) + res(4)) * v * b * (res(2) + res(4)) * beta_max + (d ^ 2 + (4 * mu + 4 * gamma_m) * d + (mu + gamma_m) ^ 2) * ((alpha_f_mut + d) ^ 2) * v ^ 2 * b ^ 2 * ((res(2) + res(4)) ^ 2)) * alpha_m_mut ^ 2 + 0.2e1 * (mu + gamma_m) * d * ((res(1) * (res(2) * 1 * alpha_f_mut ^ 2 + (1 * (d + mu + gamma_f) * res(2) + res(1) * 1 * (d + mu + gamma_m)) * alpha_f_mut + res(2) * d * 1 * (mu + gamma_f)) * alpha_f_mut * 1 * (res(1) + res(3) + res(2) + res(4)) ^ 2 * beta_max ^ 2) + 0.2e1 * (((res(1) * 1) - (res(2) * 1) / 0.2e1) * (alpha_f_mut ^ 2) + (-(1 * (d + mu + gamma_f) * res(2)) / 0.2e1 + 0.2e1 * res(1) * 1 * (d + mu + gamma_f / 0.2e1 + gamma_m / 0.2e1)) * alpha_f_mut + d * ((res(1) * 1) - (res(2) * 1) / 0.2e1) * (mu + gamma_f)) * (alpha_f_mut + d) * (res(1) + res(3) + res(2) + res(4)) * v * b * (res(2) + res(4)) * beta_max + b ^ 2 * v ^ 2 * ((alpha_f_mut + d) ^ 2) * ((res(2) + res(4)) ^ 2) * (d + mu + gamma_m)) * alpha_m_mut + ((mu + gamma_m) ^ 2) * (d ^ 2) * ((res(1) * alpha_f_mut * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (alpha_f_mut + d) * (res(2) + res(4))) ^ 2) / (alpha_m_mut + d) ^ 2 / ((alpha_f_mut + d) ^ 2)) + (((res(1) * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (res(2) + res(4))) * alpha_f_mut + b * d * v * (res(2) + res(4))) * alpha_m_mut ^ 2 + ((res(2) * beta_max * 1 * (res(1) + res(3) + res(2) + res(4)) * alpha_f_mut ^ 2) + (((res(1) + res(3) + res(2) + res(4)) * ((res(1) * 1 + res(2) * 1) * d + 1 * (mu + gamma_f) * res(2) + res(1) * 1 * (mu + gamma_m)) * beta_max) + b * v * (d + mu + gamma_m) * (res(2) + res(4))) * alpha_f_mut + d * ((res(2) * 1 * (mu + gamma_f) * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (d + mu + gamma_m) * (res(2) + res(4)))) * alpha_m_mut + (mu + gamma_m) * d * (((res(1) * 1 * (res(1) + res(3) + res(2) + res(4)) * beta_max) + b * v * (res(2) + res(4))) * alpha_f_mut + b * d * v * (res(2) + res(4)))) / (alpha_f_mut + d) / (alpha_m_mut + d) / (res(1) + res(3) + res(2) + res(4)) / (mu + alpha_m_mut + gamma_m) / (mu + alpha_f_mut + gamma_f) / 0.2e1;